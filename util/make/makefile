#==============================================================================
#$RCSfile: makefile,v $
#
#   DESC : Application Level Make
#
# AUTHOR : Rick Foos, ECL, LLC
#
#  EEMBC : Technical Advisory Group (TechTAG)
#
#    CVS : $Revision: 1.38 $
#------------------------------------------------------------------------------
# Copyright (c) 1998-2002 by the EDN Embedded Microprocessor 
# Benchmark Consortium (EEMBC), Inc. All Rights Reserved.
#==============================================================================

# Following variable defines key for TH Regular LITE= , or TH Lite LITE=$(THLITE)
LITE	=
# Following variable defines the key for all compiler (and platform) files
# For the gcc compiler (Install Cygwin on Win32 platform)
TOOLCHAIN	= gcc
# For the Microsoft Visual C/C++ compiler on Win32 platform:
#TOOLCHAIN	= vc

# Optional: Passed to compiler, here or in makefile to override THCFG defines.
#COMPILER_DEFINES =

# Reserved for Version 2 development leave blank. 
VER		=
# Reserved constants
TLOGTYP="_time"
SLOGTYP="_size"
THLITE="_lite"

# ROOT directory for Harness and Utilities
ROOT		= ..

# Root Directory for EEMBC test harness source code
TH			= $(ROOT)/th$(LITE)

# By Default, a seperate al directory per platform.
# If you want each toolchain to reference the same AL, define
# PLATFORM=TOOLCHAIN, in <TOOLCHAIN>.mak, and create an AL
# directory with the appropriate files in $TH/$TOOLCHAIN/al
THPORT		= $(TH)/$(PLATFORM)

# Toolchain Directory, Allows override from command line.
TCDIR	= $(ROOT)/util/make

# Directories for Executables, Objects/Library, and Benchmark Results.
BINBUILD	= $(TOOLCHAIN)/bin$(LITE)
OBJBUILD	= $(TOOLCHAIN)/obj$(LITE)
RESULTS		= $(TOOLCHAIN)/results$(LITE)

# Directories to be included for the test harness
THINCS		= -I. -I$(THPORT)/al -I$(TH)/src

# Additional dependencies for each benchmark
BMDEPS		= iterations$(VER)$(PLATFORM).mak $(THPORT)/al/eembc_dt.h $(THPORT)/al/thcfg.h $(THPORT)/al/heapport.h

# Library file generated by harness.mak
# old obj link possible, change THLIB to THOBJS in depgen.cml files, and
# remove diffmesure from build.
THLIB		= $(OBJBUILD)/thobjs$(LITE)$(LIBTYPE)

# Include Tool Chain Definition and Control file
# Tool Executables:
#	CC (compiler), AS(assembler), LD(linker), AR(librarian),SIZE(size utility)
# Tool Flags:
#	COMPILER_FLAGS, COMPILER_DEBUG, COMPILER_DEFINES, WARNING_OPTIONS, 
#	COMPILER_INCLUDES, LINK_FLAGS, LINK_INLCUDES, ASSEMBLER_FLAGS, 
#	LIBRARY_FLAGS
# Control Defines:
#	ALL_TARGETS, RUN, RUN_FLAGS
include 	$(TCDIR)/$(TOOLCHAIN).mak

# Variables used by targets.mak

CINCS	= $(COMPILER_INCLUDES) $(THINCS)

# Compile for Debugger
CFLAGSD	= $(WARNING_OPTIONS) $(COMPILER_DEBUG) $(COMPILER_DEFINES) 
CCD		= $(CC) -c $(CFLAGSD) $(CINCS) 

# Compile for Benchmarking
CFLAGS	= $(WARNING_OPTIONS) $(COMPILER_FLAGS) $(COMPILER_DEFINES)
CCC		= $(CC) -c $(CFLAGS) $(CINCS)  

# Select Compile for Benchmarking, or Compile for Debug
COM		= $(CCC)

# Assembler definitions
AFLAGS	= $(ASSEMBLER_FLAGS) $(ASSEMBLER_INCLUDES)
ASM		= $(AS) $(AFLAGS)

# Linker Definitions
LFLAGS	= $(LINKER_FLAGS) $(LINKER_INCLUDES)
LINK	= $(LD) $(LFLAGS)

# Librarian Definitions
ARFLAGS	= $(LIBRARY_FLAGS)
LIBRARY	= $(AR) $(ARFLAGS)

# Command Line used by run.mak for benchmarks
CMDLINE				= -autogo
CMDLINE$(THLITE)	=

# The following "all" target works where there is a run and a results utility
# (Not all platforms support run and results.)
# ALL_TARGETS defined in TOOLCHAIN
#ALL_TARGETS = mkdir targets run results
all:: $(ALL_TARGETS) 

rerun: cleanlogs results

scrub: rmdir

# Remove all generated files.
distclean: cleanrule 
	-rm -rf $(TOOLCHAIN)
	-rm -f  $(TOOLCHAIN)$(TLOGTYP).log
	-rm -f  $(TOOLCHAIN)$(TLOGTYP)$(THLITE).log
	-rm -f  $(TOOLCHAIN)$(PLATFORM).log
	-rm -f  $(TOOLCHAIN)$(PLATFORM)$(THLITE).log

targets:: mkdir
run:: targets
results:: run

# Following includes makerule.pl dependancies.
# (if not editing depgen.cml files, this may be commented out. The 
# targets<toolchain>.mak files will not be overwritten)
# You may also use the $TARGETS varaible to re-use the dependancy files 
# from another toolchain. You can set this in util/make/<toolchain>.mak
include	$(ROOT)/util/perl/makerule.mak

# Following includes Test Harness Dependancies
# By Default, a dependancy file per TOOLCHAIN. (TARGETS=TOOLCHAIN)
#
# If you want multiple toolchains to reference the same TH dependencies,
# set TARGETS=PLATFORM defined in <TOOLCHAIN>.mak.
# 
include $(TH)/$(TARGETS)/harness.mak

# Following includes Compiler overrides for Benchmark iterations per platform.
include iterations$(VER)$(PLATFORM).mak

include targets$(VER)_$(TARGETS).mak

# If it is possible to execute the benchmarks from make command it will
# be platform specific, so include the platform specific run commands.
# PLATFORM is defined in the TOOLCHAIN file.
include run$(VER)$(PLATFORM).mak

# If it is possible to extract results from make command it will
# be platform specific, so include the platform specific results commands.
include results$(VER)$(PLATFORM).mak

# Make the directory structure for this suite and test harness
# Any platform/toolchain specific modifications can be edited in.
# NOTE: dirs uses TOOLCHAIN as root directory to seperate object files. This
# handles multiple Tool Chains from a single file.
include dirs$(VER)$(PLATFORM).mak

# Compiler flags are reported for Certification, Generate information
# about the run into a log file. These are available in the make
# environment, so generate them here.
all:: $(TOOLCHAIN)$(PLATFORM)$(LITE).log

$(TOOLCHAIN)$(PLATFORM)$(LITE).log: makefile $(TCDIR)/$(TOOLCHAIN).mak
	@pwd	>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "MAKE ENVIRONMENT FOR $(TOOLCHAIN)$(PLATFORM)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "TOOLCHAIN:	$(TOOLCHAIN)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "PLATFORM:	$(PLATFORM)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "TARGETS:	$(TARGETS)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "ALL TARGETS:	$(ALL_TARGETS)" >>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "COMPILER FLAGS:	$(CFLAGS)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "ASSEMBLER FLAGS:	$(AFLAGS)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "LIBRARY FLAGS:	$(ARFLAGS)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "LINKER FLAGS:	$(LFLAGS)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "RUN COMMAND:	$(RUN)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "RUN FLAGS:	$(RUN_FLAGS)"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo "COMMAND LINE:	$(CMDLINE$(LITE))"	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log
	@echo	>>$(TOOLCHAIN)$(PLATFORM)$(LITE).log

